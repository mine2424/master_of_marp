#!/bin/bash

# Marp CLI wrapper script
# Makes it easier to work with Marp presentations from the terminal

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Get script directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Change to project root
cd "$PROJECT_ROOT"

# Function to print colored output
print_color() {
    local color=$1
    shift
    echo -e "${color}$@${NC}"
}

# Function to show help
show_help() {
    cat << EOF
Marp Presentation Tool

Usage: marp <command> [options]

Commands:
    new [name]          Create a new presentation
    build <file>        Build a presentation to HTML/PDF
    watch [file]        Watch and auto-rebuild presentations
    serve               Start preview server
    dev                 Start development mode (watch + serve)
    validate [file]     Validate presentation(s)
    list                List all presentations
    open <file>         Open presentation in browser
    export <file>       Export to multiple formats
    clean               Clean build directory
    help                Show this help message

Options:
    --theme <name>      Specify theme (base, minimal, vibrant)
    --pdf               Export to PDF
    --pptx              Export to PowerPoint
    --all               Apply to all presentations

Examples:
    marp new "Q4 Review"
    marp build src/presentations/my_slide.md --pdf
    marp validate --all
    marp dev

EOF
}

# Function to list presentations
list_presentations() {
    print_color "$BLUE" "📁 Presentations in src/presentations/:"
    echo
    find src/presentations -name "*.md" -type f | while read -r file; do
        basename=$(basename "$file")
        modified=$(date -r "$file" "+%Y-%m-%d %H:%M")
        size=$(du -h "$file" | cut -f1)
        echo "  • $basename (modified: $modified, size: $size)"
    done
    echo
}

# Function to create new presentation
create_new() {
    local name="$1"
    
    if [ -z "$name" ]; then
        print_color "$YELLOW" "Enter presentation name: "
        read -r name
    fi
    
    # Sanitize filename
    filename=$(echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g')
    date_prefix=$(date "+%Y%m%d")
    
    print_color "$YELLOW" "Include date in filename? (y/n): "
    read -r include_date
    
    if [[ "$include_date" =~ ^[Yy]$ ]]; then
        filepath="src/presentations/${date_prefix}_${filename}.md"
    else
        filepath="src/presentations/${filename}.md"
    fi
    
    # Check if file exists
    if [ -f "$filepath" ]; then
        print_color "$RED" "Error: File already exists: $filepath"
        exit 1
    fi
    
    # Select theme
    print_color "$YELLOW" "Select theme:"
    echo "  1) base (default)"
    echo "  2) minimal"
    echo "  3) vibrant"
    read -r theme_choice
    
    case $theme_choice in
        2) theme="minimal" ;;
        3) theme="vibrant" ;;
        *) theme="base" ;;
    esac
    
    # Create presentation
    npm run new -- --name "$name" --theme "$theme" --output "$filepath" 2>/dev/null || {
        # Fallback to manual creation if npm script fails
        cp src/templates/basic.md "$filepath"
        sed -i '' "s/theme: base/theme: $theme/g" "$filepath"
        sed -i '' "s/# Presentation Title/# $name/g" "$filepath"
        sed -i '' "s/Your Name/$(whoami)/g" "$filepath"
        sed -i '' "s/2025-07-18/$(date +%Y-%m-%d)/g" "$filepath"
    }
    
    print_color "$GREEN" "✅ Created: $filepath"
    print_color "$BLUE" "📝 Opening in editor..."
    ${EDITOR:-nano} "$filepath"
}

# Function to build presentation
build_presentation() {
    local file="$1"
    local pdf_flag=""
    
    if [ -z "$file" ]; then
        print_color "$RED" "Error: Please specify a file to build"
        exit 1
    fi
    
    # Check for PDF flag
    if [[ "$@" =~ "--pdf" ]]; then
        pdf_flag="--pdf"
    fi
    
    print_color "$BLUE" "🔨 Building $file..."
    npm run build "$file" $pdf_flag
}

# Function to validate presentations
validate_presentations() {
    local target="$1"
    
    if [[ "$@" =~ "--all" ]] || [ -z "$target" ]; then
        print_color "$BLUE" "🔍 Validating all presentations..."
        npm run validate
    else
        print_color "$BLUE" "🔍 Validating $target..."
        npm run validate "$target"
    fi
}

# Function to export presentation
export_presentation() {
    local file="$1"
    
    if [ -z "$file" ]; then
        print_color "$RED" "Error: Please specify a file to export"
        exit 1
    fi
    
    print_color "$BLUE" "📤 Exporting $file..."
    
    # Export to multiple formats
    print_color "$YELLOW" "Exporting to HTML..."
    npm run build "$file"
    
    print_color "$YELLOW" "Exporting to PDF..."
    npm run export:pdf "$file"
    
    print_color "$YELLOW" "Export to PowerPoint? (y/n): "
    read -r export_pptx
    if [[ "$export_pptx" =~ ^[Yy]$ ]]; then
        npm run export:pptx "$file"
    fi
    
    print_color "$GREEN" "✅ Export complete!"
}

# Function to open presentation in browser
open_presentation() {
    local file="$1"
    
    if [ -z "$file" ]; then
        print_color "$RED" "Error: Please specify a file to open"
        exit 1
    fi
    
    # Build if needed
    local basename=$(basename "$file" .md)
    local html_file="dist/${basename}.html"
    
    if [ ! -f "$html_file" ]; then
        print_color "$YELLOW" "Building presentation first..."
        npm run build "$file"
    fi
    
    # Open in browser
    if command -v open &> /dev/null; then
        open "$html_file"
    elif command -v xdg-open &> /dev/null; then
        xdg-open "$html_file"
    else
        print_color "$YELLOW" "Please open manually: $html_file"
    fi
}

# Function to clean build directory
clean_build() {
    print_color "$YELLOW" "🧹 Cleaning build directory..."
    rm -rf dist/*
    print_color "$GREEN" "✅ Build directory cleaned"
}

# Main command handling
case "$1" in
    new)
        shift
        create_new "$@"
        ;;
    build)
        shift
        build_presentation "$@"
        ;;
    watch)
        shift
        if [ -n "$1" ]; then
            print_color "$BLUE" "👀 Watching $1..."
            npm run watch -- "$1"
        else
            npm run watch
        fi
        ;;
    serve)
        npm run serve
        ;;
    dev)
        npm run dev
        ;;
    validate)
        shift
        validate_presentations "$@"
        ;;
    list)
        list_presentations
        ;;
    open)
        shift
        open_presentation "$@"
        ;;
    export)
        shift
        export_presentation "$@"
        ;;
    clean)
        clean_build
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        if [ -z "$1" ]; then
            show_help
        else
            print_color "$RED" "Error: Unknown command '$1'"
            echo
            show_help
        fi
        exit 1
        ;;
esac